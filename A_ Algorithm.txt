import heapq
class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state, self.parent, self.g, self.h, self.f = state, parent, g, h, g + h
def astar(start, goal, successors, heuristic):
    open_list, closed_set = [], set()
    heapq.heappush(open_list, Node(start))
    while open_list:
        current_node = heapq.heappop(open_list)
        if current_node.state == goal:
            path = []; c_node = current_node
            while c_node: path.append(c_node.state); c_node = c_node.parent
            return path[::-1]
        closed_set.add(current_node.state)
        for s, c in successors(current_node.state):
            if s in closed_set: continue
            g, h = current_node.g + c, heuristic(s, goal)
            heapq.heappush(open_list, Node(s, current_node, g, h))
    return None
def successors(state):
    pass
def heuristic(state, goal):
    pass
start_state, goal_state = ..., ...
path = astar(start_state, goal_state, successors, heuristic)
print(path)
